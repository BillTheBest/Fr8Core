// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace PlanDirectory.Templates
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "d:\Dev\Fr8Core\Services\PlanDirectory\Templates\PlanTemplateDetailsTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class PlanTemplateDetailsTemplate : PlanTemplateDetailsTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("    ");
            this.Write("        ");
            this.Write(@"<!DOCTYPE html>
<html>

<head>
    <link href=""../Content/css/additionalcss/font-awesome/css/font-awesome.css"" rel=""stylesheet"" type=""text/css"" />
    <link href=""../Content/css/additionalcss/font-awesome/css/style.css"" rel=""stylesheet"" type=""text/css"" />
    <link href='https://fonts.googleapis.com/css?family=Francois+One' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Didact+Gothic' rel='stylesheet' type='text/css'>
    <link rel=""stylesheet"" href=""../bower_components/bootstrap/dist/css/bootstrap.min.css"" />
    <link rel=""stylesheet"" href=""../Content/metronic/components.css"" />
    <link rel=""stylesheet"" href=""../Content/css/plan-directory.css"" />
    <link rel=""stylesheet"" href=""../Content/css/shared/main.css"" />
    <script src=""../bower_components/jquery/dist/jquery.min.js""></script>
    <script src=""../Content/metronic/jquery.blockui.min.js""></script>
    <script src=""../bower_components/bootstrap/dist/js/bootstrap.min.js""></script>
    <script src=""../Content/metronic/ui.js""></script>
    <script src=""../Scripts/main.js""></script>
    <title>Fr8 - Plan Template Details -
        ");
            
            #line 22 "d:\Dev\Fr8Core\Services\PlanDirectory\Templates\PlanTemplateDetailsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(planTemplate.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    </title>\r\n    <meta charset=\"utf-8\" />\r\n</head>\r\n\r\n<body>\r\n    <div id=\"wra" +
                    "p\">\r\n        <!-- NAVIGATION BAR-->\r\n        <header id=\"site-header\" class=\"hea" +
                    "der container-fluid\">\r\n            <nav class=\"navbar navbar-fixed-top\">\r\n      " +
                    "          <div class=\"container\">\r\n                    <!-- NAVIGATION BAR LOGO " +
                    "-->\r\n                    <div class=\"navbar-header\">\r\n                        <a" +
                    " href=\"http://dev.fr8.co\" class=\"navbar-brand\">\r\n                            <im" +
                    "g src=\"../Content/img/dockyard_logo_white.png\" alt=\"FR8\">\r\n                     " +
                    "       <h1 class=\"hide\">FR8 Company</h1>\r\n                        </a>\r\n        " +
                    "            </div>\r\n                    <!-- NAVIGATION BAR CONTENT -->\r\n       " +
                    "             <div class=\"navbar-collapse collapse\" id=\"main-nav\" role=\"navigatio" +
                    "n\">\r\n                        <!-- SINGUP/LOGIN UPRIGHT OR WELCOMING MESSAGE -->\r" +
                    "\n                        <!-- MENU -->\r\n                        <ul class=\"nav n" +
                    "avbar-nav navbar-right\">\r\n                            <!--How It Works-->\r\n     " +
                    "                       <li><a href=\"http://dev.fr8.co/#about\">How it Works</a></" +
                    "li>\r\n                            <!--Services-->\r\n                            <l" +
                    "i data-scroll=\"scrolling\" class=\"dropdown\">\r\n                                <a " +
                    "data-target=\"#\" href=\"/\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"bu" +
                    "tton\" aria-haspopup=\"true\" aria-expanded=\"false\" title=\"Services\">Services <span" +
                    " class=\"caret\"></span></a>\r\n                                <ul class=\"dropdown-" +
                    "menu\">\r\n                                    <li><a href=\"http://dev.fr8.co/Servi" +
                    "ces/DocuSign\">DocuSign</a></li>\r\n                                    <li><a href" +
                    "=\"http://dev.fr8.co/Services/Salesforce\">Salesforce.com</a></li>\r\n              " +
                    "                      <li><a href=\"http://dev-directory.fr8.co\">Plan Directory</" +
                    "a></li>\r\n                                </ul>\r\n                            </li" +
                    ">\r\n                            <!--Developers-->\r\n                            <l" +
                    "i><a href=\"https://github.com/Fr8org/Fr8Core/blob/master/Docs/Home.md\">Developer" +
                    "s</a></li>\r\n                            <!--Company-->\r\n                        " +
                    "    <li data-scroll=\"scrolling\" class=\"dropdown\">\r\n                             " +
                    "   <a href=\"/\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria" +
                    "-haspopup=\"true\" aria-expanded=\"false\" title=\"Company\">Company <span class=\"care" +
                    "t\"></span></a>\r\n                                <ul class=\"dropdown-menu\">\r\n    " +
                    "                                <li data-scroll=\"scrolling\"><a href=\"http://dev." +
                    "fr8.co/Company/#vision\">Vision</a></li>\r\n                                    <li" +
                    " data-scroll=\"scrolling\"><a href=\"http://dev.fr8.co/Company/#team\">Team</a></li>" +
                    "\r\n                                    <li data-scroll=\"scrolling\"><a href=\"http:" +
                    "//dev.fr8.co/Company/#press\">Press Releases</a></li>\r\n                          " +
                    "          <li data-scroll=\"scrolling\"><a href=\"http://dev.fr8.co/Company/#locati" +
                    "on\">Location</a></li>\r\n                                    <li data-scroll=\"scro" +
                    "lling\"><a href=\"http://dev.fr8.co/Company/#jobs\">Jobs</a></li>\r\n                " +
                    "                </ul>\r\n                            </li>\r\n                      " +
                    "      <!--Contact-->\r\n                            <li><a href=\"http://dev.fr8.co" +
                    "/Support\" title=\"Contact\">Contact</a></li>\r\n                            <!--Blog" +
                    "-->\r\n                            <li><a href=\"http://blog.fr8.co\" target=\"_blank" +
                    "\">Blog</a></li>\r\n                            <!--Login Button on Right-->\r\n     " +
                    "                       <li>\r\n                                <p class=\"navbar-bt" +
                    "n\">\r\n                                    <a href=\"http://dev.fr8.co/DockyardAcco" +
                    "unt\" class=\"btn btn-danger\">Login/Register</a>\r\n                                " +
                    "</p>\r\n                            </li>\r\n                        </ul>\r\n        " +
                    "            </div>\r\n                </div>\r\n            </nav>\r\n        </header" +
                    ">\r\n        <section id=\"planDirectory\" class=\"plan-directory-background full-hei" +
                    "ght-block text-block\" data-section=\"support\">\r\n            <div class=\"inner-bg " +
                    "full-size-bg\"></div>\r\n            <div class=\"container full-height-block\">\r\n   " +
                    "             <div class=\"inner-wrap centered base-block-white\">\r\n               " +
                    "     <!-- SEARCH BAR-->\r\n                    <div class=\"search-bar-container\">\r" +
                    "\n                        <div>\r\n                            <h2 style=\"width:100" +
                    "%\">Details - <em>");
            
            #line 91 "d:\Dev\Fr8Core\Services\PlanDirectory\Templates\PlanTemplateDetailsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(planTemplate.Name));
            
            #line default
            #line hidden
            this.Write(@"</em></h2>
                        </div>
                        <hr/>
                    </div>
                    <!-- SEARCH RESULTS-->
                    <div class=""row"">
                        <div class=""col-md-12"">
                            <hr />
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-md-12"">
                            <h3>V");
            this.Write(" Registered By ");
            this.Write("</h3>\r\n                        </div>\r\n                    </div>\r\n              " +
                    "      <div class=\"row\">\r\n                        <div class=\"col-md-12\">\r\n      " +
                    "                      <p>\r\n                                <em>");
            this.Write(@"</em>
                            </p>
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-md-12"">
                            <strong>Sample JSON</strong>
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-md-12"">
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <div class=""clear clear-footer-spacer""></div>
    </div>
    <!-- FOOTER -->
    <footer id=""site-footer"" class=""section"">
        <div class=""container"">
            <p class=""copyright"">
                ");
            
            #line 131 "d:\Dev\Fr8Core\Services\PlanDirectory\Templates\PlanTemplateDetailsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.Year));
            
            #line default
            #line hidden
            this.Write(" © The Fr8 Company. All Rights Reserved.</p>\r\n        </div>\r\n    </footer>\r\n    " +
                    "<!-- END FOOTER -->\r\n</body>\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "d:\Dev\Fr8Core\Services\PlanDirectory\Templates\PlanTemplateDetailsTemplate.tt"

private global::Fr8.Infrastructure.Data.DataTransferObjects.PublishPlanTemplateDTO _planTemplateField;

/// <summary>
/// Access the planTemplate parameter of the template.
/// </summary>
private global::Fr8.Infrastructure.Data.DataTransferObjects.PublishPlanTemplateDTO planTemplate
{
    get
    {
        return this._planTemplateField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool planTemplateValueAcquired = false;
if (this.Session.ContainsKey("planTemplate"))
{
    this._planTemplateField = ((global::Fr8.Infrastructure.Data.DataTransferObjects.PublishPlanTemplateDTO)(this.Session["planTemplate"]));
    planTemplateValueAcquired = true;
}
if ((planTemplateValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("planTemplate");
    if ((data != null))
    {
        this._planTemplateField = ((global::Fr8.Infrastructure.Data.DataTransferObjects.PublishPlanTemplateDTO)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class PlanTemplateDetailsTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
