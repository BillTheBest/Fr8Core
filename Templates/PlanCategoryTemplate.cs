// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace HubWeb.Templates
{
    using HubWeb.ViewModels;
    using System.Globalization;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class PlanCategoryTemplate : PlanCategoryTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"
<!DOCTYPE html>
<html>
<head>
	<link href=""../Content/css/additionalcss/font-awesome/css/font-awesome.css"" rel=""stylesheet"" type=""text/css"" />
    <link href=""../Content/css/additionalcss/font-awesome/css/style.css"" rel=""stylesheet"" type=""text/css"" />
    <link href='https://fonts.googleapis.com/css?family=Francois+One' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Didact+Gothic' rel='stylesheet' type='text/css'>
    <link rel=""stylesheet"" href=""../bower_components/bootstrap/dist/css/bootstrap.min.css"" />
    <link rel=""stylesheet"" href=""../Content/metronic/components.css"" />
    <link rel=""stylesheet"" href=""../Content/css/plan-directory.css"" />
    <link rel=""stylesheet"" href=""../Content/css/shared/PlanDirectoryMain.css"" />
    <script src=""../bower_components/jquery/dist/jquery.min.js""></script>
    <script src=""../Content/metronic/jquery.blockui.min.js""></script>
    <script src=""../bower_components/bootstrap/dist/js/bootstrap.min.js""></script>
    <script src=""../Content/metronic/ui.js""></script>
    <script src=""../Scripts/PlanDirectoryMain.js""></script>
    <title>Fr8 | Plan Category :
        ");
            
            #line 26 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Name));
            
            #line default
            #line hidden
            this.Write(@"
    </title>    
</head>
<body>
	<div id=""wrap"">
        <!-- NAVIGATION BAR-->
        <header id=""site-header"" class=""header container-fluid"">
            <nav class=""navbar navbar-fixed-top"">
                <div class=""container"">
                    <!-- NAVIGATION BAR LOGO -->
                    <div class=""navbar-header"">
                        <a href=""");
            
            #line 37 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NavLinks.BaseUrl));
            
            #line default
            #line hidden
            this.Write(@""" class=""navbar-brand"">
                            <img src=""../Content/img/dockyard_logo_white.png"" alt=""FR8"">
                            <h1 class=""hide"">FR8 Company</h1>
                        </a>
                    </div>
                    <!-- NAVIGATION BAR CONTENT -->
                    <div class=""navbar-collapse collapse"" id=""main-nav"" role=""navigation"">
                        <!-- SINGUP/LOGIN UPRIGHT OR WELCOMING MESSAGE -->
                        <!-- MENU -->
                        <ul class=""nav navbar-nav navbar-right"">
                            <!--How It Works-->
                            <li><a href=""");
            
            #line 48 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NavLinks.BaseUrl));
            
            #line default
            #line hidden
            this.Write(@"/#about"">How it Works</a></li>
                            <!--Services-->
                            <li data-scroll=""scrolling"" class=""dropdown"">
                                <a data-target=""#"" href=""/"" class=""dropdown-toggle"" data-toggle=""dropdown"" role=""button"" aria-haspopup=""true"" aria-expanded=""false"" title=""Services"">Services <span class=""caret""></span></a>
                                <ul class=""dropdown-menu"">
                                    <li><a href=""");
            
            #line 53 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NavLinks.BaseUrl));
            
            #line default
            #line hidden
            this.Write("/Services/DocuSign\">DocuSign</a></li>\r\n                                    <li><a" +
                    " href=\"");
            
            #line 54 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NavLinks.BaseUrl));
            
            #line default
            #line hidden
            this.Write("/Services/Salesforce\">Salesforce.com</a></li>\r\n                                  " +
                    "  <li><a href=\"");
            
            #line 55 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NavLinks.PlanDirectory));
            
            #line default
            #line hidden
            this.Write(@""">Plan Directory</a></li>
                                </ul>
                            </li>
                            <!--Developers-->
                            <li><a href=""https://github.com/Fr8org/Fr8Core/blob/master/Docs/Home.md"">Developers</a></li>
                            <!--Company-->
                            <li data-scroll=""scrolling"" class=""dropdown"">
                                <a href=""/"" class=""dropdown-toggle"" data-toggle=""dropdown"" role=""button"" aria-haspopup=""true"" aria-expanded=""false"" title=""Company"">Company <span class=""caret""></span></a>
                                <ul class=""dropdown-menu"">
                                    <li data-scroll=""scrolling""><a href=""");
            
            #line 64 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NavLinks.BaseUrl));
            
            #line default
            #line hidden
            this.Write("/Company/#vision\">Vision</a></li>\r\n                                    <li data-s" +
                    "croll=\"scrolling\"><a href=\"");
            
            #line 65 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NavLinks.BaseUrl));
            
            #line default
            #line hidden
            this.Write("/Company/#team\">Team</a></li>\r\n                                    <li data-scrol" +
                    "l=\"scrolling\"><a href=\"");
            
            #line 66 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NavLinks.BaseUrl));
            
            #line default
            #line hidden
            this.Write("/Company/#press\">Press Releases</a></li>\r\n                                    <li" +
                    " data-scroll=\"scrolling\"><a href=\"");
            
            #line 67 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NavLinks.BaseUrl));
            
            #line default
            #line hidden
            this.Write("/Company/#location\">Location</a></li>\r\n                                    <li da" +
                    "ta-scroll=\"scrolling\"><a href=\"");
            
            #line 68 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NavLinks.BaseUrl));
            
            #line default
            #line hidden
            this.Write("/Company/#jobs\">Jobs</a></li>\r\n                                </ul>\r\n           " +
                    "                 </li>\r\n                            <!--Contact-->\r\n            " +
                    "                <li><a href=\"");
            
            #line 72 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NavLinks.BaseUrl));
            
            #line default
            #line hidden
            this.Write("/Support\" title=\"Contact\">Contact</a></li>\r\n                            <!--Blog-" +
                    "->\r\n                            <li><a href=\"");
            
            #line 74 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(NavLinks.Blog));
            
            #line default
            #line hidden
            this.Write(@""" target=""_blank"">Blog</a></li>
                        </ul>
                    </div>
                </div>
            </nav>
        </header>
        <section id=""planDirectory"" class=""plan-directory-background full-height-block text-block"" data-section=""support"">
            <div class=""inner-bg full-size-bg""></div>
            <div class=""container full-height-block"">
                <div class=""inner-wrap centered base-block-white"">
                    <!-- SEARCH BAR-->
                    <div class=""search-bar-container"">
                        <div style=""float:left;margin: 20px;height: 40px;"">
                            <h3>Plan Category: <em>
								");
            
            #line 88 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
 int j = 0;
								string seoStr = "";
								seoStr = Name;
								seoStr = seoStr.Substring(0, seoStr.IndexOf(".html"));								
								
								seoStr = seoStr.Replace("-", " and ");

								TextInfo myTI = new CultureInfo("en-US",false).TextInfo;
								seoStr = myTI.ToTitleCase( seoStr );
								seoStr = seoStr.Replace("And", "and");
								Write(seoStr);
								seoStr = "Fr8 plans involving " + seoStr + " take advantage of " + seoStr + "'s visulalization capabilities";
								
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t</em></h2>\r\n                        </div>\r\n\t\t\t\t\t\t<div class=\"icons\" sty" +
                    "le=\"margin: 10px\">\r\n\t\t\t\t\t\t\t");
            
            #line 105 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
 int i = 0;
							foreach (var tag in Tags)
							{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<img class=\"web-service-icon\" src=\"..");
            
            #line 108 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tag.Value));
            
            #line default
            #line hidden
            this.Write("\"/>\t\t\r\n\t\t\t\t\t\t\t\t");
            
            #line 109 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
 if (i < Tags.Count - 1)
								{ 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t<img src=\"../Content/icons/plus.png\" style=\"height: 30px;\"/>\r\n\t\t\t\t\t\t\t\t");
            
            #line 112 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
 i++;
								} 
            
            #line default
            #line hidden
            this.Write("                        \r\n\t\t\t\t\t\t");
            
            #line 114 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"						</div>
                        <hr/>
                    </div>
                    <!-- SEARCH RESULTS-->
                    <div class=""result-container"" style=""background-color: white"">
                        <div class=""item"" style=""border: 0px"">
                            <p style=""font-size: 22px"">Related Plans</p>
							<table class=""table""> 
								<thead>
									<tr>
										<th>#</th>
										<th>Plan Name</th>
										<th>Plan Description</th>
										<th>Action</th>
									</tr>
								</thead>
								<tbody>
									");
            
            #line 132 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
 int number = 1;
									foreach (var plan in RelatedPlans) 
									{
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<th scope=\"row\">");
            
            #line 136 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(number++));
            
            #line default
            #line hidden
            this.Write("</th>\r\n\t\t\t\t\t\t\t\t\t\t<td>");
            
            #line 137 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(plan.Item1));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t\t\t\t\t\t\t<td>");
            
            #line 138 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(plan.Item2));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t\t\t\t\t\t\t<td><a href=\"");
            
            #line 139 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(plan.Item3));
            
            #line default
            #line hidden
            this.Write("\">Create</a></td>\r\n\t\t\t\t\t\t\t\t\t</tr>                   \r\n\t\t\t\t\t\t\t\t\t");
            
            #line 141 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"                    
								</tbody>
							</table>
                        </div>             
                    </div>
					<div style=""width: 100%;color: black;background-color: white;text-align: left;padding-left: 50px;padding-bottom: 20px;font-size: 15pt;"">
						");
            
            #line 148 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(seoStr));
            
            #line default
            #line hidden
            this.Write(@"
					</div>
                </div>
            </div>
        </section>
        <div class=""clear clear-footer-spacer""></div>
    </div>
    <!-- FOOTER -->
    <footer id=""site-footer"" class=""section"">
        <div class=""container"">
            <p class=""copyright"">
                ");
            
            #line 159 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now.Year));
            
            #line default
            #line hidden
            this.Write(" © The Fr8 Company. All Rights Reserved.</p>\r\n        </div>\r\n    </footer>\r\n    " +
                    "<!-- END FOOTER -->\t    \r\n</div>\r\n</body>\r\n</html>\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "E:\Project\7-29\Fr8Core\Templates\PlanCategoryTemplate.tt"

private string _NameField;

/// <summary>
/// Access the Name parameter of the template.
/// </summary>
private string Name
{
    get
    {
        return this._NameField;
    }
}

private global::System.Collections.Generic.IDictionary<System.String, System.String> _TagsField;

/// <summary>
/// Access the Tags parameter of the template.
/// </summary>
private global::System.Collections.Generic.IDictionary<System.String, System.String> Tags
{
    get
    {
        return this._TagsField;
    }
}

private global::System.Collections.Generic.IList<System.Tuple<System.String, System.String, System.String>> _RelatedPlansField;

/// <summary>
/// Access the RelatedPlans parameter of the template.
/// </summary>
private global::System.Collections.Generic.IList<System.Tuple<System.String, System.String, System.String>> RelatedPlans
{
    get
    {
        return this._RelatedPlansField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool NameValueAcquired = false;
if (this.Session.ContainsKey("Name"))
{
    this._NameField = ((string)(this.Session["Name"]));
    NameValueAcquired = true;
}
if ((NameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Name");
    if ((data != null))
    {
        this._NameField = ((string)(data));
    }
}
bool TagsValueAcquired = false;
if (this.Session.ContainsKey("Tags"))
{
    this._TagsField = ((global::System.Collections.Generic.IDictionary<System.String, System.String>)(this.Session["Tags"]));
    TagsValueAcquired = true;
}
if ((TagsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Tags");
    if ((data != null))
    {
        this._TagsField = ((global::System.Collections.Generic.IDictionary<System.String, System.String>)(data));
    }
}
bool RelatedPlansValueAcquired = false;
if (this.Session.ContainsKey("RelatedPlans"))
{
    this._RelatedPlansField = ((global::System.Collections.Generic.IList<System.Tuple<System.String, System.String, System.String>>)(this.Session["RelatedPlans"]));
    RelatedPlansValueAcquired = true;
}
if ((RelatedPlansValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("RelatedPlans");
    if ((data != null))
    {
        this._RelatedPlansField = ((global::System.Collections.Generic.IList<System.Tuple<System.String, System.String, System.String>>)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class PlanCategoryTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
