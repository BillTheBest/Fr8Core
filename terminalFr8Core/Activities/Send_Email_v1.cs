using Data.Entities;
using Data.States;
using Fr8Data.Control;
using Fr8Data.DataTransferObjects;
using Fr8Data.Manifests;
using StructureMap;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using TerminalBase.BaseClasses;
using TerminalBase.Infrastructure;
using terminalUtilities.SendGrid;
using Utilities.Configuration.Azure;

namespace terminalFr8Core.Actions
{
    public class Send_Email_v1 : EnhancedTerminalActivity<Send_Email_v1.ActivityUi>
    {
        private IEmailPackager _emailPackager;

        public class ActivityUi : StandardConfigurationControlsCM
        {
            public TextSource EmailAddress { get; set; }
            public TextSource EmailSubject { get; set; }
            public TextSource EmailBody { get; set; }

            public ActivityUi()
            {
                EmailAddress = new TextSource("Email Address", string.Empty, nameof(EmailAddress))
                {
                    Source = new FieldSourceDTO
                    {
                        Label = string.Empty,
                        ManifestType = CrateManifestTypes.StandardDesignTimeFields,
                        FilterByTag = string.Empty,
                        RequestUpstream = true
                    }
                };
                EmailAddress.Events.Add(new ControlEvent("onChange", "requestConfig"));

                EmailSubject = new TextSource("Email Subject", string.Empty, nameof(EmailSubject))
                {
                    Source = new FieldSourceDTO
                    {
                        Label = string.Empty,
                        ManifestType = CrateManifestTypes.StandardDesignTimeFields,
                        FilterByTag = string.Empty,
                        RequestUpstream = true
                    }
                };
                EmailSubject.Events.Add(new ControlEvent("onChange", "requestConfig"));

                EmailBody = new TextSource("Email Body", string.Empty, nameof(EmailBody))
                {
                    Source = new FieldSourceDTO
                    {
                        Label = string.Empty,
                        ManifestType = CrateManifestTypes.StandardDesignTimeFields,
                        FilterByTag = string.Empty,
                        RequestUpstream = true
                    }
                };
                EmailBody.Events.Add(new ControlEvent("onChange", "requestConfig"));

                Controls = new List<ControlDefinitionDTO> { EmailAddress, EmailSubject, EmailBody };
            }
        }

        public Send_Email_v1() : base(false)
        {
            ActivityName = "Send Email";
            _emailPackager = ObjectFactory.GetInstance<IEmailPackager>();
        }

        protected override Task Initialize(CrateSignaller crateSignaller)
        {
            return Task.FromResult(0);
        }

        protected override Task Configure(CrateSignaller crateSignaller, ValidationManager validationManager)
        {
            return Task.FromResult(0);
        }

        protected override Task Validate (ValidationManager validationManager)
        {
            validationManager.ValidateTextSourceNotEmpty(ConfigurationControls.EmailAddress, "Email address can't be empty");
            validationManager.ValidateTextSourceNotEmpty(ConfigurationControls.EmailSubject, "Email subject can't be empty");
            validationManager.ValidateTextSourceNotEmpty(ConfigurationControls.EmailBody, "Email body can't be empty");

            return Task.FromResult(0);
        }
    
        protected override async Task RunCurrentActivity()
        {
            var fromAddress = CloudConfigurationManager.GetSetting("OutboundFromAddress");

            var emailAddress = ConfigurationControls.EmailAddress.GetValue(CurrentPayloadStorage);
            var emailSubject = ConfigurationControls.EmailSubject.GetValue(CurrentPayloadStorage);
            var emailBody = ConfigurationControls.EmailBody.GetValue(CurrentPayloadStorage);

            var userData = await GetCurrentUserData(CurrentActivity, CurrentContainerId);
            var footerMessage = string.Format(@"<hr> <p> This email was generated by The Fr8 Company as part of the processing of Fr8 Container {0} on behalf of Fr8 User 
                                {1}.For questions about this email or other Fr8 matters, go to www.fr8.co </p>",
                                CurrentContainerId, userData.FirstName + " " + userData.LastName);

            var mailerDO = new MailerDO()
            {
                Email = new EmailDO()
                {
                    From = new EmailAddressDO
                    {
                        Address = fromAddress,
                        Name = "Fr8 Operations"
                    },

                    Recipients = new List<RecipientDO>()
                    {
                        new RecipientDO()
                        {
                            EmailAddress = new EmailAddressDO(emailAddress),
                            EmailParticipantType = EmailParticipantType.To
                        }
                    },
                    Subject = emailSubject,
                    HTMLText = CreateEmailHTMLText(emailBody)
                },
                Footer = footerMessage,
            };

            await _emailPackager.Send(mailerDO);
        }

        private string CreateEmailHTMLText(string emailBody)
        {
            var template = @"<html><body>{0}</body></html>";
            var htmlText = string.Format(template, emailBody);

            return htmlText;
        }
    }
}