using Data.Infrastructure;
using Fr8Data.Control;
using Fr8Data.Crates;
using Fr8Data.DataTransferObjects;
using Fr8Data.Manifests;
using Hub.Managers;
using PhoneNumbers;
using StructureMap;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using TerminalBase.BaseClasses;
using TerminalBase.Infrastructure;
using terminalUtilities.Twilio;
using Twilio;

namespace terminalFr8Core.Actions
{
    public class Send_SMS_v1 : EnhancedTerminalActivity<Send_SMS_v1.ActivityUi>
    {
        private ITwilioService _twilio;

        public class ActivityUi : StandardConfigurationControlsCM
        {
            public TextSource SmsNumber { get; set; }
            public TextSource SmsBody { get; set; }

            public ActivityUi()
            {
                SmsNumber = new TextSource("SMS Number", string.Empty, nameof(SmsNumber))
                {
                    Source = new FieldSourceDTO
                    {
                        Label = string.Empty,
                        ManifestType = CrateManifestTypes.StandardDesignTimeFields,
                        FilterByTag = string.Empty,
                        RequestUpstream = true
                    }
                };
                SmsNumber.Events.Add(new ControlEvent("onChange", "requestConfig"));

                SmsBody = new TextSource("SMS Body", string.Empty, nameof(SmsBody))
                {
                    Source = new FieldSourceDTO
                    {
                        Label = string.Empty,
                        ManifestType = CrateManifestTypes.StandardDesignTimeFields,
                        FilterByTag = string.Empty,
                        RequestUpstream = true
                    }
                };
                SmsBody.Events.Add(new ControlEvent("onChange", "requestConfig"));

                Controls = new List<ControlDefinitionDTO> { SmsNumber, SmsBody };
            }
        }

        public Send_SMS_v1() : base(false)
        {
            ActivityName = "Send SMS";
            _twilio = ObjectFactory.GetInstance<ITwilioService>();
        }

        protected override async Task Initialize(CrateSignaller crateSignaller)
        {
            CurrentActivityStorage.Add(await CreateAvailableFieldsCrate(CurrentActivity));
        }

        protected override async Task Configure(CrateSignaller crateSignaller, ValidationManager validationManager)
        {
            CurrentActivityStorage.RemoveByLabel("Upstream Terminal-Provided Fields");
            CurrentActivityStorage.Add(await CreateAvailableFieldsCrate(CurrentActivity));
        }

        protected override async Task RunCurrentActivity()
        {
            Message curMessage;

            try
            {
                FieldDTO smsFieldDTO = ParseSMSNumberAndMsg();
                string smsNumber = smsFieldDTO.Key;
                string smsBody = smsFieldDTO.Value + "\nThis message was generated by Fr8. http://www.fr8.co";

                try
                {
                    curMessage = _twilio.SendSms(smsNumber, smsBody);
                    EventManager.TwilioSMSSent(smsNumber, smsBody);
                    var curFieldDTOList = CreateKeyValuePairList(curMessage);
                    CurrentPayloadStorage.Add(Crate.FromContent("Message Data", new StandardPayloadDataCM(curFieldDTOList)));
                }
                catch (Exception ex)
                {
                    EventManager.TwilioSMSSendFailure(smsNumber, smsBody, ex.Message);
                    Error( "Twilio Service Failure due to " + ex.Message);
                }
            }
            catch (ArgumentException appEx)
            {
                Error(appEx.Message);
            }
        }

        public FieldDTO ParseSMSNumberAndMsg()
        {
            var smsNumber = GeneralisePhoneNumber(ConfigurationControls.SmsNumber.GetValue(CurrentPayloadStorage).Trim());
            var smsBody = ConfigurationControls.SmsBody.GetValue(CurrentPayloadStorage);

            return new FieldDTO(smsNumber, smsBody);
        }

        private string GeneralisePhoneNumber(string smsNumber)
        {
            PhoneNumberUtil phoneUtil = PhoneNumberUtil.GetInstance();
            smsNumber = new string(smsNumber.Where(s => char.IsDigit(s) || s == '+' || (phoneUtil.IsAlphaNumber(smsNumber) && char.IsLetter(s))).ToArray());
            if (smsNumber.Length == 10 && !smsNumber.Contains("+"))
                smsNumber = "+1" + smsNumber; //we assume that default region is USA
            return smsNumber;
        }

        private List<FieldDTO> CreateKeyValuePairList(Message curMessage)
        {
            List<FieldDTO> returnList = new List<FieldDTO>();
            returnList.Add(new FieldDTO("Status", curMessage.Status));
            returnList.Add(new FieldDTO("ErrorMessage", curMessage.ErrorMessage));
            returnList.Add(new FieldDTO("Body", curMessage.Body));
            returnList.Add(new FieldDTO("ToNumber", curMessage.To));
            return returnList;
        }
    }
}